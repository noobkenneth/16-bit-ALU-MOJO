module adder (
	input alufn[6],
	input a[16],
	input b[16],
	output out[16],
	output zOut,
	output vOut,
	output nOut

  ) {

  sig zComp;
  sig result[16];
  sig o2[16];
  
  var i;

  always {

  	zOut = 0;
  	vOut = 0;
  	nOut = 0;
  	out = 8hxx;

  	case(alufn) {

  	  Instruction.ADD:
  	  	result = a + b;
  	  	out = result;

  	  	nOut = result[15];
  	  	vOut = (a[15] & b[15] & ~result[15]) | (~a[15] & ~b[7] & result[15]);
  	  	zComp = result[0];
  	  	for (i = 1; i < 16; i++) {
  	  	  zComp = (zComp | result[i]);
  	  	}
  	  	zOut = ~zComp;

  	  Instruction.SUB:
  	    o2 = -b;
  	    result = a + o2;
  	    out = result;

  	    nOut = result[15];
  	    vOut = (a[15] & o2[15] &  ~result[15]) | (~a[15] & ~o2[15] & result[15]);
  	    zComp = result[0];
  	    for (i = 1; i < 16; i++) {
  	      zComp = (zComp | result[i]);
  	    }
  	    zOut = ~zComp;

//  	  Instruction.MUL:
//  	  	out = op1 * op2;

  	  //Inst.DIV:
  	  //	out = $signed(op1) / $signed(op2);                

  	  //Inst.NEG:
  	  	//out = -op1;

  	  //Inst.ABS:
  	  //	out = (-op1 & 8x{op1[15]}) | (op1 & 8x{~op[15]});        
  	  
  	}
  }

}
	
	